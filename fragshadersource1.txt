#version 330 core
out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  
in vec2 TexCoords;
 
uniform vec3 lightPos; 
uniform vec3 viewPos; 
uniform vec3 lightColor;
uniform vec3 objectColor;

struct Material{
   sampler2D diffuse;
   sampler2D specular;
   float shininess;
};

struct Light{
   vec3 direction;
   vec3 ambience;
   vec3 diffusion;
   vec3 specularity;
   float cutoff;
   float outerCutoff;
   float constant;
   float linear;
   float quadratic;
};

struct DirLight{
   vec3 direction;
   vec3 ambience;
   vec3 diffusion;
   vec3 specularity;
};

struct PointLight{
   vec3 position;
   vec3 ambient;
   vec3 diffuse;
   vec3 specular;
   float constant;
   float linear;
   float quadratic;
};

struct SpotLight{
   vec3 position;
   vec3 direction;
   vec3 ambient;
   vec3 diffuse;
   vec3 specular;
   float constant;
   float linear;
   float quadratic;
   float cutOff;
   float outerCutoff;
};
uniform DirLight dirLight;
uniform PointLight pointLights[4];
uniform SpotLight spotLight;

vec3 calcDirLight(DirLight light, vec3 norm, vec3 viewDir);
vec3 calcPointLight(PointLight light, vec3 norm, vec3 FragPos, vec3 viewDir);
vec3 calcSpotLight(SpotLight light, vec3 norm, vec3 FragPos, vec3 viewDir);
uniform Material material;
uniform Light light;

void main()
{
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos-FragPos);
    vec3 result=calcDirLight(dirLight, norm, viewDir);
    for(int i=0; i<4; i++){
	result+=calcPointLight(pointLights[i], norm, FragPos, viewDir);
    } 
    result+=calcSpotLight(spotLight, norm, FragPos, viewDir);
    FragColor = vec4(result, 1.0);
} 
vec3 calcDirLight(DirLight light, vec3 norm, vec3 viewDir){
    vec3 ambient=light.ambience*vec3(texture(material.diffuse, TexCoords));
    vec3 lightDir=normalize(-light.direction);
    float diff=max(dot(norm,lightDir),0.0);
    vec3 diffuse=light.diffusion*diff*vec3(texture(material.diffuse, TexCoords));
    vec3 reflectDir=reflect(-lightDir,norm);
    float spec=pow(max(dot(viewDir, reflectDir),0.0),128.0);
    vec3 specular=light.specularity*spec*vec3(texture(material.specular, TexCoords));
    vec3 result=ambient+diffuse+specular;
    return result;
}

vec3 calcPointLight(PointLight light, vec3 norm, vec3 FragPos, vec3 viewDir){
    float distance=length(light.position-FragPos);
    float attenuation=1.0/(light.constant+(light.linear*distance)+(light.quadratic*(distance*distance)));
    vec3 ambient=light.ambient*vec3(texture(material.diffuse,TexCoords));
    vec3 lightDir=normalize(light.position-FragPos);
    float diff=max(dot(norm,lightDir),0.0);
    vec3 diffuse=light.diffuse*diff*vec3(texture(material.diffuse,TexCoords));
    vec3 reflDir=reflect(-lightDir,norm);
    float spec=pow(max(dot(viewDir,reflDir),0.0),128.0);
    vec3 specular=light.specular*spec*vec3(texture(material.specular,TexCoords));
    ambient*=attenuation;
    diffuse*=attenuation;
    specular*=attenuation;
    vec3 result=ambient+diffuse+specular;
    return result;
}

vec3 calcSpotLight(SpotLight light, vec3 norm, vec3 FragPos, vec3 viewDir){
    vec3 lightDir = normalize(light.position - FragPos);
    vec3 ambient=light.ambient*vec3(texture(material.diffuse,TexCoords));
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));  
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));  
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = (light.cutOff - light.outerCutoff);
    float intensity = clamp((theta - light.outerCutoff) / epsilon, 0.0, 1.0);
    diffuse  *= intensity;
    specular *= intensity;
    float distance    = length(light.position - FragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    ambient  *= attenuation; 
    diffuse   *= attenuation;
    specular *= attenuation;   
    vec3 result = ambient + diffuse + specular;
    return result;
}